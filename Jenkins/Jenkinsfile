pipeline {

    // üåç Set environment variables available to all stages
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'                                // AWS region for ECR authentication and operations
        ECR_REPO           = '576607007321.dkr.ecr.us-east-1.amazonaws.com/gitops-gp-ecr' // Full URL of the ECR repository where the image will be pushed
        IMAGE_TAG          = "1.${env.BUILD_NUMBER}"                    // Unique image tag using Jenkins build number to version images
        IMAGE_NAME         = "${ECR_REPO}:${IMAGE_TAG}"                 // Complete Docker image name including tag for pushing to ECR
        TARGET_FOLDER      = 'Nodeapp'            // Folder in the repo to watch for changes to decide if build is needed
    }

    // üõ†Ô∏è Define the Jenkins agent environment for running the pipeline
    agent {
        kubernetes {
            // Use a Kubernetes pod configured via the provided YAML file for build isolation and environment setup
            yamlFile 'Jenkins/kaniko-pod.yaml'
        }
    }

    // üîî Automatically trigger pipeline on GitHub push events (using webhook)
    triggers {
        githubPush()
    }

    stages {

        // Stage: Checkout the source code from the configured SCM repository
        stage('üì• Checkout Source Code') {
            steps {
                checkout scm
            }
        }

        // Stage: Check if there are any changes in the monitored target folder since the last commit
        stage('üîç Check for Changes in Target Folder') {
            steps {
                script {
                    // Run git diff to get list of files changed between the last two commits
                    def changes = sh(
                        script: "git diff --name-only HEAD~1 HEAD",
                        returnStdout: true
                    ).trim().split("\n")

                    // Determine if any changed files are within the TARGET_FOLDER directory
                    def changed = changes.any { it.startsWith("${TARGET_FOLDER}/") }

                    if (!changed) {
                        // If no relevant changes, mark build to skip by writing 'true' to skip_build file
                        echo "‚ö†Ô∏è No changes in '${TARGET_FOLDER}'. Skipping build."
                        currentBuild.description = "No changes in ${TARGET_FOLDER}"
                        writeFile file: 'skip_build', text: 'true'
                    } else {
                        // Changes detected, mark build to proceed by writing 'false'
                        echo "‚úÖ Changes found in '${TARGET_FOLDER}', continuing..."
                        writeFile file: 'skip_build', text: 'false'
                    }
                }
            }
        }
       
        // Stage: Build and push Docker image, but only if build should proceed (based on changes)
        stage('üöÄ Build & Push Docker Image') {
            when {
                // Conditional execution using helper function to check if build should run
                expression {
                    return shouldBuild()
                }
            }
            steps {
                container('kaniko') {
                    // Run Kaniko executor inside the 'kaniko' container to build and push Docker image
                    sh """
                        /kaniko/executor \\
                          --context=./${TARGET_FOLDER} \\
                          --dockerfile=./${TARGET_FOLDER}/dockerfile \\
                          --destination=${IMAGE_NAME} \\
                          --oci-layout-path=/kaniko/oci-layout \\
                          --verbosity=debug \\
                          --skip-tls-verify=false
                    """
                }
                // Log confirmation that Docker image was successfully pushed
                echo "‚úÖ Docker image pushed : ${IMAGE_NAME}"
            }
        }
    }

    // üì¢ Post-build actions and notifications based on build result
    post {
        success {
            echo "üéâ Pipeline completed successfully."
        }
        failure {
            echo "‚ùå Pipeline failed. Check the logs above."
        }
    }
}

// ‚úÖ Helper function to decide if the build should continue, by reading the skip_build file created earlier
def shouldBuild() {
    return fileExists('skip_build') && readFile('skip_build').trim() == 'false'
}
